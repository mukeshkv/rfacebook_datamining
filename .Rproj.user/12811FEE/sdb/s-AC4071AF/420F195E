{
    "contents" : "# to begin, check first, 03_collection_of_posts.R\n######\nstart.time <- Sys.time()\n######\nlibrary(Rfacebook)\nlibrary(rvest) # functions of this lib are used in metadata extraction\n####READING USER INPUT DATA HERE\n# ALSO CHECK 08 simple_input_from_the_screen.R\nread_integer<-function(){\n  n<-readline(prompt = \"enter an integer value:\")\n  n<-as.integer(n)\n  if(is.na(n)){\n    n<-read_integer()\n  }\n  return (n)\n}\n\nread_token_from_console<-function(){\n  n<-readline(prompt = \"enter token value:\")\n  if(n==\"\"){\n    n<-read_token_from_console()\n  }\n  return (n)\n}\n\nread_page_name_from_console<-function(){\n  n<-readline(prompt = \"enter page name:\")\n  if(n==\"\"){\n    n<-read_page_name_from_console()\n  }\n  return (n)\n}\n####\nt<-read_token_from_console()\n###\nn<-read_integer()\n####\nk<-read_page_name_from_console()\n\npage<-getPage(k,t,n)\n\npost_id<-character(n) \npost_likes<-double(n)\npost_comment_count<-double(n)\npost_share_count<-double(n)\npost_engagement<-double(n)\npost_link<-character(n)\npost_creation_date<-character(n)\n\nfor (i in 1:n){\nif (is.na(page$id[i])){ ####<<<< here what is done >>> in case the post is no longer present while extracting the  posts from the page, \n  ### the loop will break as the posts on the page are exhausted\n  break\n} else{\n  result<-try({  ##### here try and catch statement is used. anytype of error including facebookapi error\n    page_post<-getPost(post=page$id[i],token = t)\n    \n    a<-page_post$post$id\n    if( (length(a)==0) && (typeof(a)==\"character\") ) {\n      post_id[i]<-NA\n    }  else {\n      post_id[i]<-a\n    }\n    \n    post_comment_count[i]<-page_post$post$comments_count\n    post_share_count[i]<-page_post$post$shares_count\n    post_likes[i]<-page_post$post$likes_count\n    post_engagement[i]<-post_comment_count[i]+post_share_count[i]+post_likes[i]\n    \n    b<-page_post$post$created_time\n    if( (length(b)==0) && (typeof(b)==\"character\") ) {\n      post_creation_date[i]<-NA\n    }  else {\n      post_creation_date[i]<-b\n    }\n    \n    c<-page_post$post$link\n    if( (length(c)==0) && (typeof(c)==\"character\") ) {\n      post_link[i]<-NA\n    }  else {\n      post_link[i]<-c\n    }\n   print(i)\n  })\n  if (class(result)==\"try-error\") break\n} #### ^^^^ why break is used here??? >>> as error might come due to facebookapi being down  or  the token is being expired\n\n}\n\n#####@@@@ HERE IN THE BELOW CODE: FOLDER IS CREATED, DATAFRAME IS SAVED INTO IT AND THEN THE WORKING DIRECTORY IS SHIFTED BACK\n\n\ndf<-data.frame(post_id,post_creation_date,post_likes,post_comment_count,post_share_count,post_engagement,post_link,stringsAsFactors = F)\nfilepath<-file.path('~/Desktop/rfacebook_datamining/',paste(Sys.time(),k,sep = \" \"))\ndir.create(filepath)\nsetwd(filepath)\nsave(df,file = \"data_incomplete.Rda\")\nsetwd('~/Desktop/rfacebook_datamining/')\ndf1=df\n#View(df1)\n##### ^^^^^ why here \"=\" is used: \"<-\" creates global variable but \"=\" only creates local variable\n\n######@@@@@ NOW BELOW IS THE CODE FOR METADATA RETRIEVAL AND ADDING THE ADDTIONAL DATA INTO THE DATAFRAME @@@@@#######\n\nlinks_to_extract<-df1$post_link\n# str(links_to_extract)\n###@@@@ here links_to_extract is a cloumn vector with 'chr' elements\n# structure of an R object is determined by the function str()\n# str(mydata)\n#str(links_to_extract[1])\n######@@@@@@@@@@@@@@@@@@@@@@@@ n>>10\nkeywords<-character(n) #n\nauthors<-character(n)  #n\ntitle<-character(n)  #n\n\nfor (i in 1:n){ #n\n  try({ #### here try statement is used to avoid any halting of for loop due to errors including http error\n  url<-read_html(links_to_extract[i])\n\n if (is.na(links_to_extract[i])){\n   title[i]<-NA\n   authors[i]<-NA\n   keywords[i]<-NA\n   \n }else{\n   m<-html_nodes(url, \"title\") %>% html_text()\n   n0<-m[1]\n   if( (length(n0)==0) && (typeof(n0)==\"character\") ) {\n     title[i]<-NA\n   }  else {\n     title[i]<-n0\n   }\n  # p<-html_nodes(url,\"meta[property=author]\") %>% html_attr(\"content\")\n   p<-html_nodes(url,\"meta[name=author]\") %>% html_attr(\"content\") \n   if( (length(p)==0) && (typeof(p)==\"character\") ) {\n     authors[i]<-NA\n   }  else {\n     authors[i]<-p\n   }\n   \n   q<-html_nodes(url,\"meta[name=keywords]\") %>% html_attr(\"content\")\n   if( (length(q)==0) && (typeof(q)==\"character\") ) {\n     keywords[i]<-NA\n   }  else {\n     keywords[i]<-q\n   }\n }\n     \n  print(i)\n})\n}\n\n#####@@@@ NOW ADDING A COLUMN TO DATAFRAME @@@@#####\n\ndf1<-cbind(df1,title,authors,keywords)\nView(df1)\n\n####@@@@@ WHAT IS DONE BELOW @@@@@####\n##How to save a data.frame in R?\n##  \n# There are several ways. One way is to use save() to save the exact object. e.g. for data frame foo:\n#   \n#   save(foo,file=\"data.Rda\")\n# \n# Then load it with:\n#   \n#   load(\"data.Rda\")\n#    \n#\n# ^^^^ see the implementation @ 09 meta_data_retrieval.R\nsetwd(filepath)\nsave(df1,file=\"data.Rda\")\nlibrary(RJSONIO)\nx<-toJSON(df1)\nwrite(x, file=paste(k,\".JSON\",sep = \"\"))\nlibrary (\"xlsx\")\nwrite.xlsx(df1,\"test.xlsx\",\"testsheet\")\nsetwd('~/Desktop/rfacebook_datamining/')\n\nend.time <- Sys.time()\ntime.taken <- end.time - start.time\ntime.taken\n",
    "created" : 1446117179547.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "533633760",
    "id" : "420F195E",
    "lastKnownWriteTime" : 1446128760,
    "path" : "~/Desktop/rfacebook_datamining/06 extract_n_posts_from_a_page.R",
    "project_path" : "06 extract_n_posts_from_a_page.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}